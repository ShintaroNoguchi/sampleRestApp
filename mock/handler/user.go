// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler/user.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserHandler is a mock of UserHandler interface
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// GetAllUser mocks base method
func (m *MockUserHandler) GetAllUser(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllUser", arg0)
}

// GetAllUser indicates an expected call of GetAllUser
func (mr *MockUserHandlerMockRecorder) GetAllUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockUserHandler)(nil).GetAllUser), arg0)
}

// CreateUser mocks base method
func (m *MockUserHandler) CreateUser(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", arg0)
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserHandlerMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserHandler)(nil).CreateUser), arg0)
}

// UpdateUser mocks base method
func (m *MockUserHandler) UpdateUser(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", arg0)
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserHandlerMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserHandler)(nil).UpdateUser), arg0)
}

// DeleteUser mocks base method
func (m *MockUserHandler) DeleteUser(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", arg0)
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserHandlerMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserHandler)(nil).DeleteUser), arg0)
}
